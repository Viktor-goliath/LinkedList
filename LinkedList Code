using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
class Program
{
    static void Main(string[] args)
    {
     
    }
}

public class LinkedListNode<T>
{
    public T data;
    public LinkedListNode<T> next;
}
public class LinkedList<T> : IEnumerable
{
    private LinkedListNode<T> head, tail;
    public int Count = 0;

    public T this[int index]
    {
        get
        {
            if (head.next == tail || index >= Count)
            {
                throw new IndexOutOfRangeException();
            }
            LinkedListNode<T> current = head.next;
            for (int i = 0; i < index; i++)
            {
                current = current.next;
            }
            return current.data;
        }
    }

    public LinkedList()
    {
        head = new LinkedListNode<T>();
        tail = new LinkedListNode<T>();
        head.next =  tail;
    }

    public LinkedListNode<T> AddFirst(T data)
    {
        LinkedListNode<T> NewNode = new LinkedListNode<T>() { data = data };

        NewNode.next = head.next;
        head.next = NewNode;
        Count++;
        return NewNode;
    }

    public LinkedListNode<T> AddLast(T data)
    {
        LinkedListNode<T> current = head;
        LinkedListNode<T> NewNode = new LinkedListNode<T>() { data = data };
        if (Count == 0)
        {
            NewNode.next = tail;
            head.next = NewNode;
            Count++;
            return NewNode;
        }
        while(current.next != tail)
        { 
            if (current.next.next == tail)
            {
                NewNode.next = tail;
                current.next.next = NewNode;
                Count++;
                return NewNode;
            }
            current = current.next;
        }
        return null;
    }

    public bool Remove(T data)
    {
        if (Count == 0)
            return false;
        LinkedListNode<T> current = head;
        while (current.next != tail)
        {
            if (data.Equals(current.next.data))
            {
                current.next = current.next.next;
                Count--;
                return true;
            }
            current = current.next;
        }
        return false;
    }

    //public bool Remove(T data) { return Remove(head, data); }

    //public bool Remove(LinkedListNode<T> current, T data)
    //{
    //    if (current.next.Equals(tail))
    //        return false;
    //    if (current.next.data.Equals(data))
    //    {
    //        current.next = current.next.next;
    //        Count--;
    //        return true;
    //    }
    //    return Remove(current.next, data);
    //}

    public void Clear()
    {
        head.next = tail;
        Count = 0;
    }

    public bool Contains(T data)
    {
        LinkedListNode<T> current = head;
        while(current != tail)
        {
            if (Equals(current.data, data))
            {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    public LinkedListNode<T> Find(T data)
    {
        LinkedListNode<T> current = head;
        while(current != tail)
        {
            if (Equals(current.data, data))
            {
                return current;
            }
            current = current.next;
        }
        return null;
    }


    public IEnumerator GetEnumerator()
    {
        return new Enumerator(this);
    }

    private class Enumerator : IEnumerator
    {
        private int position = -1;
        private LinkedList<T> list;
        public object Current
        {
            get
            {
                if (position < list.Count)
                    return list[position];

                throw new IndexOutOfRangeException();
            }
        }

        public Enumerator(LinkedList<T> list)
        {
            this.list = list;
        }

        public bool MoveNext()
        {
            position++;
            if (position < list.Count)
            {
                return true;
            }
            return false;
        }

        public void Reset()
        {
            position = -1;
        }
    }
}
